#!/usr/bin/env perl
use strict;
use warnings;

use lib 'lib';

use autodie;
use Calendar::Advent::Article;
use Calendar::Simple;
use DateTime;
use DateTime::Format::W3CDTF;
use Email::Simple;
use File::Copy qw(copy);
use File::Path qw(remove_tree);
use DateTime;
use File::Basename;
use Getopt::Long::Descriptive;
use Template;
use XML::Atom::SimpleFeed;

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'root',       'the root of articles',        { default => './root'  } ],
  [ 'share=s',    'directory of shared content', { default => './share' } ],
  [ 'output|o=s', 'output directory',            { default => './out'   } ],
  [ 'today=s',    'the day we treat as "today"; default to today'         ],
);

sub parse_isodate {
  my ($date, $time_from) = @_;

  my ($y, $m, $d) = $date =~ /\A([0-9]{4})-([0-9]{2})-([0-9]{2})\z/;
  die "can't parse date: $date\n" unless $y and $m and $d;

  $time_from ||= [ (0) x 10 ];

  return DateTime->new(
    year   => $y,
    month  => $m,
    day    => $d,
    hour   => $time_from->[2],
    minute => $time_from->[1],
    second => $time_from->[0],
    time_zone => 'America/New_York',
  );
}

my $today = $opt->{today}
          ? parse_isodate($opt->{today}, [localtime])
          : DateTime->now(time_zone => 'America/New_York');

remove_tree($opt->{output});
mkdir($opt->{output});

my $template = Template->new(
  WRAPPER => 'templates/wrapper.tt',
  PRE_CHOMP  => 1,
  POST_CHOMP => 1,
);

my $share = $opt->{share};
copy $_ => $opt->{output} for <$share/*>;

my $dec_01 = DateTime->new(
  year => 2009, month => 12, day =>  1, time_zone => 'America/New_York'
);

my $dec_25 = DateTime->new(
  year => 2009, month => 12, day => 25, time_zone => 'America/New_York'
);

if ($dec_01 > $today) {
  my $dur  = $dec_01 - $today;
  my $days = $dur->delta_days + 1;
  my $str  = $days != 1 ? "$days days" : "1 day";

  $template->process(
    'templates/patience.tt',
    {
      days => $str,
      year => $today->year,
    },
    "$opt->{output}/index.html",
  ) || die $template->error;
  exit;
}

my $article = read_articles_from($opt->{root});

{
  my $d = $dec_01;
  while (
    $d->ymd le (sort { $a cmp $b } ($dec_25->ymd, $today->ymd))[0]
  ) {
    die "no article written for " . $d->ymd . "!\n"
      unless $article->{ $d->ymd };

    $d = $d + DateTime::Duration->new(days => 1 );
  }
}

$template->process(
  'templates/year.tt',
  {
    now  => $today,
    year => $today->year,
    calendar    => scalar calendar(12, $today->year),
    article_for => sub { $article->{sprintf("2009-12-%02u", $_[0])} },
  },
  "$opt->{output}/index.html",
) || die $template->error;

my $feed = XML::Atom::SimpleFeed->new(
  title   => 'RJBS Advent Calendar',
  link    => 'http://advent.rjbs.manxome.org/',
  link    => {
    rel  => 'self',
    href => 'http://advent.rjbs.manxome.org/atom.xml',
  },
  updated => DateTime::Format::W3CDTF->new->format_datetime($today),
  author  => 'Ricardo Signes',
  id      => 'urn:uuid:0984725a-d60d-11de-b491-d317acc4aa0b',
);

my @dates = sort keys %$article;
for my $i (0 .. $#dates) {
  my $date = $dates[ $i ];

  my $output;

  $template->process(
    'templates/article.tt',
    {
      article   => $article->{ $date },
      date      => $date,
      tomorrow  => ($i < $#dates ? $dates[ $i + 1 ] : undef),
      yesterday => ($i > 0       ? $dates[ $i - 1 ] : undef),
      year      => $today->year,
    },
    \$output,
  ) || die $template->error;

  open my $fh, '>', "$opt->{output}/$date.html";
  print $fh $output;
}

for my $date (reverse @dates){
  my $article = $article->{ $date };

  $feed->add_entry(
    title     => $article->title,
    link      => "http://advent.rjbs.manxome.org/$date.html",
    id        => $article->fake_guid,
    summary   => Encode::decode('utf-8', $article->body_xhtml),
    updated   => DateTime::Format::W3CDTF->new->format_datetime($article->date),
    category  => 'Perl',
    category  => 'RJBS',
  );
}

open my $atom, '>', "$opt->{output}/atom.xml";
$feed->print($atom);
close $atom;

sub read_articles_from {
  my ($root) = @_;
  my @files = <$root/*>;

  my %article;

  for my $file (@files) {
    my ($name, $path) = fileparse($file);
    $name =~ s{\..+\z}{}; # remove extension
    my $document = Email::Simple->new(scalar `cat $file`);
    my $isodate  = $document->header('Date') || $name;

    die "no title set in $file\n" unless $document->header('title');

    my $article  = Calendar::Advent::Article->new(
      body  => $document->body,
      date  => parse_isodate($isodate),
      title => $document->header('title'),
      package => $document->header('package'),
    );

    next unless $article->date < $today;

    die "already have an article for " . $article->date->ymd
      if $article{ $article->date->ymd };

    $article{ $article->date->ymd } = $article;
  }

  return \%article;
}

